//#include <Adafruit_LiquidCrystal.h>
#include <Servo.h>
#include <string.h>
#include <LiquidCrystal.h> 

Servo servoMotor;

const int pir1SensorPin = 2;
const int pir2SensorPin = 3;
const int buzzer1Pin = 4;
const int buzzer2Pin = 5;
const int servoPin = 6;
int pir1State = 0;
int pir2State = 0;

bool systemArmed = false;

char password[6];

int Contrast=25;
LiquidCrystal lcd_1(12, 11, 8, 9, 10, 13); 



void setup() {
  
  analogWrite(7,Contrast);
  servoMotor.attach(servoPin);
  lcd_1.begin(16, 2);
 
  pinMode(2, INPUT);
  pinMode(buzzer1Pin, OUTPUT);
  pinMode(buzzer2Pin, OUTPUT);
  servoMotor.write(180);
  Serial.begin(9600);
}

void loop() {
  
 pir1State = digitalRead(2);
 pir2State = digitalRead(3);
  
 int pirStates[2];
  
 pirStates[0] = pir1State;
 pirStates[1] = pir2State; 
 
  receive_password();
 Serial.print(password);

 if(strcmp(password, "ABCD4") == 0) {
  systemArmed = true;
} else {
  systemArmed = false;
}
 if(systemArmed == true){
   servoMotor.write(90);
   lcd_1.setCursor(0, 0);
   lcd_1.print("System armed");
   alarm_trigger(pirStates);
 }
  //delay(500);
  //servoMotor.write(0);
 if(systemArmed == false){
   servoMotor.write(0);
   lcd_1.setCursor(0, 0);
   lcd_1.print("System not armed");
 }
  
 delay(500); // Reduced delay for faster response
}

void alert(String message){
  lcd_1.clear();
  lcd_1.setCursor(0, 0);
  lcd_1.print(message);
}

void print_states(){
  Serial.println("PIR Motion Detection Test");

  Serial.print("PIR 1 State: ");
  Serial.println(pir1State);
  
  Serial.print("PIR 2 State: ");
  Serial.println(pir2State);
}

void zone_libere(){
    lcd_1.clear();
    lcd_1.setCursor(2, 0);
    lcd_1.print("Zone libere");
    noTone(buzzer1Pin);
    noTone(buzzer2Pin);
    delay(1000);  // Wait for 1 second before checking again
}

void alarm_trigger(int pirStates[]){
  	
  if(pirStates[0]==1 && pirStates[1]==1){
    lcd_1.clear();
    lcd_1.setCursor(0, 0);
    lcd_1.print("Alerta    ambele");
    lcd_1.setCursor(5, 1);
    lcd_1.print("camere");
    tone(buzzer1Pin,2000,1000);
    delay(1000);
    tone(buzzer2Pin,1000,750);
    delay(3000); // Reduced delay between consecutive alerts
  	}
  else if (pirStates[0] == 1) {
    alert("Alerta camera 1");
    tone(buzzer1Pin, 2000, 1000);
    delay(3000);  // Reduced delay between consecutive alerts
  } 
  else if(pirStates[1] == 1) {
    alert("Alerta camera 2");
    tone(buzzer2Pin, 2000, 1000);
    delay(3000);  // Reduced delay between consecutive alerts
  }
  else{
  	zone_libere();
  }
}

void receive_password() {
  static char receivedPassword[6]; // Buffer to hold the received password
  static int passwordIndex = 0; // Index to track characters received

  while (Serial.available() > 0 && passwordIndex < 5) {
    receivedPassword[passwordIndex++] = Serial.read(); // Read a character and store
    delay(10); // Small delay for stability
  }

  if (passwordIndex >= 5) {
    receivedPassword[5] = '\0'; // Null terminate the string
    strcpy(password, receivedPassword); // Copy received password to main password variable
    passwordIndex = 0; // Reset index for next password reception
  }
}
